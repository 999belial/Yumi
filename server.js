
const multer = require('multer');
const fs = require('fs');

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—ñ–≤
const AVATAR_DIR = './public/assets/img/';

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, AVATAR_DIR);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const filename = Date.now() + ext;
    cb(null, filename);
  }
});
const upload = multer({ storage });


const express = require('express');
const session = require('express-session');
const bcrypt = require('bcrypt');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const app = express();
const PORT = 3000;

// üîå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
const db = new sqlite3.Database('./db/users.sqlite', (err) => {
  if (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é:', err.message);
  } else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞');
  }
});

// üì¶ Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));
app.use(session({
  secret: 'yumi-super-secret-key',
  resave: false,
  saveUninitialized: false,
}));

// üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
db.run(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    email TEXT,
    password TEXT,
    avatar TEXT DEFAULT 'default.png',
    age INTEGER,
    gender TEXT,
    favorite TEXT
)
`);

// ‚úÖ –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø
app.post('/api/register', async (req, res) => {
  const { username, email, password } = req.body;
  const avatar = 'default.png';

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —ñ—Å–Ω—É—î email –∞–±–æ username
  db.get(`SELECT * FROM users WHERE username = ? OR email = ?`, [username, email], async (err, user) => {
    if (user) {
      return res.status(400).json({ error: '–õ–æ–≥—ñ–Ω –∞–±–æ email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.' });
    }

    try {
      const hash = await bcrypt.hash(password, 10);
      db.run(
        `INSERT INTO users (username, email, password, avatar) VALUES (?, ?, ?, ?)`,
        [username, email, hash, avatar],
        function (err) {
          if (err) return res.status(400).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.' });
          req.session.user = username;
          res.json({ success: true });
        }
      );
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
});

// üîë –í–•–Ü–î
app.post('/api/login', (req, res) => {
  const { username, password } = req.body;
  db.get(`SELECT * FROM users WHERE username = ?`, [username], async (err, user) => {
    if (err || !user) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.' });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.' });
    }

    req.session.user = user.username;
    res.json({ success: true });
  });
});

// üì§ –°–ï–°–°–Ü–Ø / –ü–†–û–§–Ü–õ–¨
app.get('/api/session', (req, res) => {
  if (!req.session.user) return res.json({ user: null });

  db.get(
    `SELECT username, email, avatar, age, gender, favorite FROM users WHERE username = ?`,
    [req.session.user],
    (err, user) => {
      if (err || !user) {
        return res.json({ user: null });
      }
      res.json({ user });
    }
  );
});

// üìù –û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ
app.post('/api/update-profile', (req, res) => {
  if (!req.session.user) return res.status(403).json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' });

  const { username, email, age, gender, favorite } = req.body;

  db.run(
    `UPDATE users SET 
      username = ?, 
      email = ?, 
      age = ?, 
      gender = ?, 
      favorite = ?
     WHERE username = ?`,
    [username, email, age, gender, favorite, req.session.user],
    function (err) {
      if (err) return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é' });

      req.session.user = username; // –æ–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é
      res.json({ success: true });
    }
  );
});

// üö™ –í–ò–•–Ü–î
app.post('/api/logout', (req, res) => {
  req.session.destroy(() => {
    res.json({ success: true });
  });
});

// ‚ñ∂ –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
});

app.post('/api/upload-avatar', upload.single('avatar'), (req, res) => {
  if (!req.session.user) return res.status(403).json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' });
  const avatarFile = req.file.filename;

  db.run(`UPDATE users SET avatar = ? WHERE username = ?`, [avatarFile, req.session.user], (err) => {
    if (err) return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—É' });
    res.json({ success: true, avatar: avatarFile });
  });
});